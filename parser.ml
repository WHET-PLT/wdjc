type token =
  | LBRACK
  | RBRACK
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | COMMA
  | SEMI
  | ASSIGN
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | SERIAL
  | PARALLEL
  | VIB
  | TREM
  | BEND
  | ARROW
  | EQ
  | NEQ
  | INCR
  | DECR
  | LT
  | LEQ
  | GT
  | GEQ
  | IF
  | ELSE
  | FOR
  | WHILE
  | LOOP
  | RETURN
  | INT
  | FUN
  | VOL
  | DUR
  | PITCH
  | INSTR
  | LITERAL of (int)
  | ID of (string)
  | NOTE
  | REST
  | CHORD
  | TRACK
  | EOF

open Parsing;;
let _ = parse_error;;
# 1 "parser.mly"
 open Ast 
# 54 "parser.ml"
let yytransl_const = [|
  257 (* LBRACK *);
  258 (* RBRACK *);
  259 (* LPAREN *);
  260 (* RPAREN *);
  261 (* LBRACE *);
  262 (* RBRACE *);
  263 (* COMMA *);
  264 (* SEMI *);
  265 (* ASSIGN *);
  266 (* PLUS *);
  267 (* MINUS *);
  268 (* TIMES *);
  269 (* DIVIDE *);
  270 (* SERIAL *);
  271 (* PARALLEL *);
  272 (* VIB *);
  273 (* TREM *);
  274 (* BEND *);
  275 (* ARROW *);
  276 (* EQ *);
  277 (* NEQ *);
  278 (* INCR *);
  279 (* DECR *);
  280 (* LT *);
  281 (* LEQ *);
  282 (* GT *);
  283 (* GEQ *);
  284 (* IF *);
  285 (* ELSE *);
  286 (* FOR *);
  287 (* WHILE *);
  288 (* LOOP *);
  289 (* RETURN *);
  290 (* INT *);
  291 (* FUN *);
  292 (* VOL *);
  293 (* DUR *);
  294 (* PITCH *);
  295 (* INSTR *);
  298 (* NOTE *);
  299 (* REST *);
  300 (* CHORD *);
  301 (* TRACK *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  296 (* LITERAL *);
  297 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\001\000\003\000\003\000\003\000\003\000\003\000\
\006\000\004\000\004\000\007\000\007\000\002\000\009\000\011\000\
\011\000\013\000\013\000\014\000\014\000\015\000\016\000\017\000\
\017\000\018\000\018\000\012\000\019\000\019\000\019\000\008\000\
\008\000\008\000\008\000\008\000\020\000\020\000\020\000\020\000\
\020\000\020\000\020\000\020\000\020\000\005\000\005\000\021\000\
\021\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\022\000\022\000\023\000\023\000\
\000\000"

let yylen = "\002\000\
\000\000\002\000\002\000\008\000\008\000\008\000\008\000\008\000\
\001\000\000\000\001\000\001\000\003\000\002\000\003\000\003\000\
\003\000\003\000\004\000\001\000\003\000\004\000\008\000\003\000\
\004\000\001\000\003\000\003\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\002\000\002\000\002\000\003\000\
\003\000\005\000\007\000\009\000\005\000\000\000\002\000\000\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\002\000\002\000\002\000\
\002\000\002\000\004\000\003\000\000\000\001\000\001\000\003\000\
\002\000"

let yydefred = "\000\000\
\001\000\000\000\000\000\032\000\000\000\033\000\036\000\034\000\
\035\000\002\000\003\000\000\000\000\000\000\000\000\000\000\000\
\000\000\014\000\000\000\000\000\000\000\000\000\000\000\009\000\
\000\000\012\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\046\000\013\000\046\000\
\046\000\046\000\046\000\000\000\000\000\000\000\000\000\000\000\
\000\000\046\000\004\000\000\000\000\000\000\000\000\000\050\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\052\000\000\000\057\000\056\000\055\000\054\000\047\000\005\000\
\007\000\006\000\008\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\039\000\000\000\038\000\037\000\000\000\
\000\000\000\000\000\000\000\000\000\000\072\000\073\000\074\000\
\000\000\000\000\000\000\070\000\071\000\000\000\000\000\000\000\
\000\000\000\000\076\000\041\000\000\000\000\000\000\000\000\000\
\040\000\000\000\000\000\000\000\000\000\000\000\000\000\024\000\
\000\000\000\000\018\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\030\000\031\000\029\000\028\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\075\000\000\000\000\000\022\000\025\000\000\000\
\019\000\000\000\000\000\000\000\045\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\043\000\000\000\000\000\000\000\
\023\000\044\000"

let yydgoto = "\002\000\
\003\000\062\000\011\000\025\000\044\000\026\000\027\000\012\000\
\063\000\064\000\065\000\066\000\067\000\133\000\068\000\069\000\
\070\000\130\000\144\000\071\000\119\000\123\000\124\000"

let yysindex = "\001\000\
\000\000\000\000\150\255\000\000\033\255\000\000\000\000\000\000\
\000\000\000\000\000\000\245\254\050\255\069\255\076\255\083\255\
\085\255\000\000\120\255\120\255\120\255\120\255\120\255\000\000\
\032\255\000\000\098\255\102\255\106\255\117\255\143\255\126\255\
\120\255\147\255\154\255\161\255\176\255\000\000\000\000\000\000\
\000\000\000\000\000\000\040\255\084\255\127\255\145\255\177\255\
\100\255\000\000\000\000\194\255\201\255\206\255\100\255\000\000\
\000\255\213\255\228\255\231\255\239\255\007\255\235\255\155\001\
\000\000\193\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\213\255\228\255\231\255\239\255\079\000\
\195\255\100\255\100\255\100\255\175\001\100\255\100\255\100\255\
\100\255\051\255\094\255\000\000\100\255\000\000\000\000\100\255\
\100\255\100\255\100\255\100\255\100\255\000\000\000\000\000\000\
\209\255\100\255\100\255\000\000\000\000\100\255\100\255\100\255\
\100\255\100\255\000\000\000\000\103\000\193\001\241\255\127\000\
\000\000\193\001\247\255\246\255\193\001\114\001\151\000\000\000\
\193\001\062\255\000\000\193\001\142\255\193\001\251\001\251\001\
\003\002\003\002\243\001\243\001\000\000\000\000\000\000\000\000\
\211\001\211\001\229\001\229\001\229\001\229\001\193\001\245\255\
\100\255\245\255\000\000\100\255\100\255\000\000\000\000\100\255\
\000\000\100\255\223\255\248\255\000\000\193\001\135\001\193\001\
\193\001\245\255\100\255\100\255\000\000\250\255\175\000\245\255\
\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\003\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\002\000\002\000\002\000\002\000\002\000\000\000\
\000\000\000\000\003\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\031\000\224\255\225\255\233\255\236\255\000\000\000\000\000\000\
\000\000\055\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\016\000\000\000\000\000\004\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\024\255\000\000\000\000\
\000\000\149\255\000\000\021\000\052\255\000\000\000\000\000\000\
\170\255\000\000\000\000\192\255\000\000\018\000\247\000\015\001\
\199\000\223\000\030\001\045\001\000\000\000\000\000\000\000\000\
\004\255\006\255\054\001\069\001\078\001\093\001\112\255\000\000\
\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\227\255\000\000\000\000\199\255\000\000\220\255\
\237\255\000\000\023\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000"

let yygindex = "\000\000\
\000\000\254\255\000\000\192\000\059\000\251\000\000\000\000\000\
\000\000\207\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\109\255\107\255\000\000\000\000"

let yytablesize = 794
let yytable = "\080\000\
\010\000\001\000\086\000\164\000\163\000\085\000\165\000\062\000\
\087\000\063\000\062\000\062\000\063\000\063\000\092\000\093\000\
\024\000\024\000\024\000\024\000\024\000\174\000\173\000\062\000\
\062\000\063\000\063\000\049\000\178\000\018\000\024\000\049\000\
\117\000\118\000\120\000\032\000\122\000\125\000\126\000\127\000\
\129\000\132\000\049\000\134\000\050\000\051\000\135\000\136\000\
\137\000\138\000\139\000\140\000\019\000\049\000\128\000\016\000\
\145\000\146\000\016\000\016\000\147\000\148\000\149\000\150\000\
\151\000\159\000\013\000\052\000\160\000\053\000\054\000\020\000\
\055\000\004\000\014\000\015\000\016\000\017\000\021\000\056\000\
\057\000\058\000\059\000\060\000\061\000\022\000\049\000\023\000\
\050\000\072\000\056\000\057\000\076\000\077\000\078\000\079\000\
\049\000\131\000\045\000\046\000\047\000\048\000\049\000\118\000\
\033\000\034\000\166\000\167\000\081\000\035\000\168\000\052\000\
\169\000\053\000\054\000\017\000\055\000\004\000\017\000\017\000\
\036\000\118\000\175\000\056\000\057\000\058\000\059\000\060\000\
\061\000\049\000\038\000\050\000\073\000\056\000\057\000\076\000\
\077\000\078\000\079\000\056\000\057\000\076\000\077\000\078\000\
\079\000\161\000\037\000\049\000\162\000\050\000\074\000\040\000\
\079\000\004\000\052\000\079\000\053\000\054\000\041\000\055\000\
\004\000\006\000\007\000\008\000\009\000\042\000\056\000\057\000\
\058\000\059\000\060\000\061\000\052\000\026\000\053\000\054\000\
\026\000\055\000\004\000\049\000\043\000\050\000\075\000\004\000\
\056\000\057\000\058\000\059\000\060\000\061\000\005\000\006\000\
\007\000\008\000\009\000\020\000\082\000\049\000\020\000\050\000\
\116\000\114\000\080\000\083\000\052\000\080\000\053\000\054\000\
\084\000\055\000\004\000\028\000\029\000\030\000\031\000\088\000\
\056\000\057\000\058\000\059\000\060\000\061\000\052\000\027\000\
\053\000\054\000\027\000\055\000\004\000\042\000\089\000\042\000\
\042\000\090\000\056\000\057\000\058\000\059\000\060\000\061\000\
\021\000\091\000\094\000\021\000\141\000\142\000\143\000\049\000\
\153\000\050\000\155\000\170\000\156\000\176\000\042\000\171\000\
\042\000\042\000\081\000\042\000\042\000\010\000\011\000\077\000\
\033\000\036\000\042\000\042\000\042\000\042\000\042\000\042\000\
\052\000\034\000\053\000\054\000\035\000\055\000\004\000\048\000\
\078\000\015\000\048\000\039\000\056\000\057\000\058\000\059\000\
\060\000\061\000\051\000\000\000\000\000\051\000\051\000\000\000\
\051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
\051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
\051\000\051\000\053\000\000\000\000\000\053\000\053\000\000\000\
\053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
\053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
\053\000\053\000\115\000\000\000\000\000\000\000\000\000\000\000\
\096\000\097\000\098\000\099\000\100\000\101\000\102\000\103\000\
\104\000\105\000\106\000\107\000\108\000\109\000\110\000\111\000\
\112\000\113\000\152\000\000\000\000\000\000\000\000\000\000\000\
\096\000\097\000\098\000\099\000\100\000\101\000\102\000\103\000\
\104\000\105\000\106\000\107\000\108\000\109\000\110\000\111\000\
\112\000\113\000\154\000\000\000\000\000\000\000\000\000\000\000\
\096\000\097\000\098\000\099\000\100\000\101\000\102\000\103\000\
\104\000\105\000\106\000\107\000\108\000\109\000\110\000\111\000\
\112\000\113\000\158\000\000\000\000\000\000\000\000\000\000\000\
\096\000\097\000\098\000\099\000\100\000\101\000\102\000\103\000\
\104\000\105\000\106\000\107\000\108\000\109\000\110\000\111\000\
\112\000\113\000\177\000\000\000\000\000\000\000\000\000\000\000\
\096\000\097\000\098\000\099\000\100\000\101\000\102\000\103\000\
\104\000\105\000\106\000\107\000\108\000\109\000\110\000\111\000\
\112\000\113\000\060\000\000\000\000\000\060\000\060\000\000\000\
\060\000\060\000\060\000\060\000\060\000\060\000\000\000\000\000\
\000\000\000\000\060\000\060\000\000\000\000\000\060\000\060\000\
\060\000\060\000\061\000\000\000\000\000\061\000\061\000\000\000\
\061\000\061\000\061\000\061\000\061\000\061\000\000\000\000\000\
\000\000\000\000\061\000\061\000\000\000\000\000\061\000\061\000\
\061\000\061\000\058\000\000\000\000\000\058\000\058\000\000\000\
\058\000\058\000\000\000\000\000\058\000\058\000\000\000\000\000\
\000\000\000\000\058\000\058\000\000\000\000\000\058\000\058\000\
\058\000\058\000\059\000\000\000\000\000\059\000\059\000\000\000\
\059\000\059\000\000\000\000\000\059\000\059\000\000\000\000\000\
\000\000\068\000\059\000\059\000\068\000\068\000\059\000\059\000\
\059\000\059\000\000\000\068\000\068\000\000\000\000\000\000\000\
\069\000\068\000\068\000\069\000\069\000\068\000\068\000\068\000\
\068\000\064\000\069\000\069\000\064\000\064\000\000\000\000\000\
\069\000\069\000\000\000\000\000\069\000\069\000\069\000\069\000\
\065\000\064\000\064\000\065\000\065\000\064\000\064\000\064\000\
\064\000\066\000\000\000\000\000\066\000\066\000\000\000\000\000\
\065\000\065\000\000\000\000\000\065\000\065\000\065\000\065\000\
\067\000\066\000\066\000\067\000\067\000\066\000\066\000\066\000\
\066\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\067\000\067\000\000\000\000\000\067\000\067\000\067\000\067\000\
\157\000\000\000\000\000\096\000\097\000\098\000\099\000\100\000\
\101\000\102\000\103\000\104\000\105\000\106\000\107\000\108\000\
\109\000\110\000\111\000\112\000\113\000\172\000\000\000\000\000\
\096\000\097\000\098\000\099\000\100\000\101\000\102\000\103\000\
\104\000\105\000\106\000\107\000\108\000\109\000\110\000\111\000\
\112\000\113\000\095\000\000\000\096\000\097\000\098\000\099\000\
\100\000\101\000\102\000\103\000\104\000\105\000\106\000\107\000\
\108\000\109\000\110\000\111\000\112\000\113\000\121\000\000\000\
\096\000\097\000\098\000\099\000\100\000\101\000\102\000\103\000\
\104\000\105\000\106\000\107\000\108\000\109\000\110\000\111\000\
\112\000\113\000\096\000\097\000\098\000\099\000\100\000\101\000\
\102\000\103\000\104\000\105\000\106\000\107\000\108\000\109\000\
\110\000\111\000\112\000\113\000\096\000\097\000\098\000\099\000\
\100\000\101\000\102\000\103\000\104\000\105\000\000\000\000\000\
\108\000\109\000\110\000\111\000\112\000\113\000\096\000\097\000\
\098\000\099\000\100\000\101\000\102\000\103\000\104\000\105\000\
\000\000\000\000\108\000\109\000\096\000\097\000\098\000\099\000\
\000\000\000\000\102\000\103\000\104\000\105\000\098\000\099\000\
\108\000\109\000\102\000\103\000\104\000\105\000\000\000\000\000\
\108\000\109\000\102\000\103\000\104\000\105\000\000\000\000\000\
\108\000\109\000"

let yycheck = "\049\000\
\003\000\001\000\003\001\153\000\152\000\055\000\154\000\004\001\
\009\001\004\001\007\001\008\001\007\001\008\001\008\001\009\001\
\019\000\020\000\021\000\022\000\023\000\171\000\170\000\020\001\
\021\001\020\001\021\001\004\001\176\000\041\001\033\000\008\001\
\082\000\083\000\084\000\004\001\086\000\087\000\088\000\089\000\
\090\000\091\000\003\001\093\000\005\001\006\001\096\000\097\000\
\098\000\099\000\100\000\101\000\003\001\003\001\004\001\004\001\
\106\000\107\000\007\001\008\001\110\000\111\000\112\000\113\000\
\114\000\004\001\034\001\028\001\007\001\030\001\031\001\003\001\
\033\001\034\001\042\001\043\001\044\001\045\001\003\001\040\001\
\041\001\042\001\043\001\044\001\045\001\003\001\003\001\003\001\
\005\001\006\001\040\001\041\001\042\001\043\001\044\001\045\001\
\003\001\004\001\040\000\041\000\042\000\043\000\003\001\153\000\
\007\001\004\001\156\000\157\000\050\000\004\001\160\000\028\001\
\162\000\030\001\031\001\004\001\033\001\034\001\007\001\008\001\
\004\001\171\000\172\000\040\001\041\001\042\001\043\001\044\001\
\045\001\003\001\005\001\005\001\006\001\040\001\041\001\042\001\
\043\001\044\001\045\001\040\001\041\001\042\001\043\001\044\001\
\045\001\004\001\004\001\003\001\007\001\005\001\006\001\005\001\
\004\001\034\001\028\001\007\001\030\001\031\001\005\001\033\001\
\034\001\042\001\043\001\044\001\045\001\005\001\040\001\041\001\
\042\001\043\001\044\001\045\001\028\001\004\001\030\001\031\001\
\007\001\033\001\034\001\003\001\005\001\005\001\006\001\034\001\
\040\001\041\001\042\001\043\001\044\001\045\001\041\001\042\001\
\043\001\044\001\045\001\004\001\003\001\003\001\007\001\005\001\
\006\001\009\001\004\001\003\001\028\001\007\001\030\001\031\001\
\003\001\033\001\034\001\020\000\021\000\022\000\023\000\003\001\
\040\001\041\001\042\001\043\001\044\001\045\001\028\001\004\001\
\030\001\031\001\007\001\033\001\034\001\003\001\003\001\005\001\
\006\001\003\001\040\001\041\001\042\001\043\001\044\001\045\001\
\004\001\003\001\008\001\007\001\036\001\037\001\038\001\003\001\
\008\001\005\001\004\001\029\001\007\001\004\001\028\001\008\001\
\030\001\031\001\000\000\033\001\034\001\004\001\004\001\004\001\
\041\001\041\001\040\001\041\001\042\001\043\001\044\001\045\001\
\028\001\041\001\030\001\031\001\041\001\033\001\034\001\008\001\
\004\001\008\001\004\001\033\000\040\001\041\001\042\001\043\001\
\044\001\045\001\004\001\255\255\255\255\007\001\008\001\255\255\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\004\001\255\255\255\255\007\001\008\001\255\255\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\004\001\255\255\255\255\255\255\255\255\255\255\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\004\001\255\255\255\255\255\255\255\255\255\255\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\004\001\255\255\255\255\255\255\255\255\255\255\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\004\001\255\255\255\255\255\255\255\255\255\255\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\004\001\255\255\255\255\255\255\255\255\255\255\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\004\001\255\255\255\255\007\001\008\001\255\255\
\010\001\011\001\012\001\013\001\014\001\015\001\255\255\255\255\
\255\255\255\255\020\001\021\001\255\255\255\255\024\001\025\001\
\026\001\027\001\004\001\255\255\255\255\007\001\008\001\255\255\
\010\001\011\001\012\001\013\001\014\001\015\001\255\255\255\255\
\255\255\255\255\020\001\021\001\255\255\255\255\024\001\025\001\
\026\001\027\001\004\001\255\255\255\255\007\001\008\001\255\255\
\010\001\011\001\255\255\255\255\014\001\015\001\255\255\255\255\
\255\255\255\255\020\001\021\001\255\255\255\255\024\001\025\001\
\026\001\027\001\004\001\255\255\255\255\007\001\008\001\255\255\
\010\001\011\001\255\255\255\255\014\001\015\001\255\255\255\255\
\255\255\004\001\020\001\021\001\007\001\008\001\024\001\025\001\
\026\001\027\001\255\255\014\001\015\001\255\255\255\255\255\255\
\004\001\020\001\021\001\007\001\008\001\024\001\025\001\026\001\
\027\001\004\001\014\001\015\001\007\001\008\001\255\255\255\255\
\020\001\021\001\255\255\255\255\024\001\025\001\026\001\027\001\
\004\001\020\001\021\001\007\001\008\001\024\001\025\001\026\001\
\027\001\004\001\255\255\255\255\007\001\008\001\255\255\255\255\
\020\001\021\001\255\255\255\255\024\001\025\001\026\001\027\001\
\004\001\020\001\021\001\007\001\008\001\024\001\025\001\026\001\
\027\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\020\001\021\001\255\255\255\255\024\001\025\001\026\001\027\001\
\007\001\255\255\255\255\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\007\001\255\255\255\255\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\008\001\255\255\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\008\001\255\255\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\255\255\255\255\
\022\001\023\001\024\001\025\001\026\001\027\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\255\255\255\255\022\001\023\001\010\001\011\001\012\001\013\001\
\255\255\255\255\016\001\017\001\018\001\019\001\012\001\013\001\
\022\001\023\001\016\001\017\001\018\001\019\001\255\255\255\255\
\022\001\023\001\016\001\017\001\018\001\019\001\255\255\255\255\
\022\001\023\001"

let yynames_const = "\
  LBRACK\000\
  RBRACK\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  COMMA\000\
  SEMI\000\
  ASSIGN\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  SERIAL\000\
  PARALLEL\000\
  VIB\000\
  TREM\000\
  BEND\000\
  ARROW\000\
  EQ\000\
  NEQ\000\
  INCR\000\
  DECR\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  IF\000\
  ELSE\000\
  FOR\000\
  WHILE\000\
  LOOP\000\
  RETURN\000\
  INT\000\
  FUN\000\
  VOL\000\
  DUR\000\
  PITCH\000\
  INSTR\000\
  NOTE\000\
  REST\000\
  CHORD\000\
  TRACK\000\
  EOF\000\
  "

let yynames_block = "\
  LITERAL\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    Obj.repr(
# 43 "parser.mly"
                 ( [], [] )
# 481 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Ast.program) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 44 "parser.mly"
                 ( (_2 :: fst _1), snd _1 )
# 489 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Ast.program) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 45 "parser.mly"
                 ( fst _1, (_2 :: snd _1) )
# 497 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'formals_opt) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 51 "parser.mly"
    ({ 
       rtype = Int;
       fname = _1;
	     formals = _4;
	     body = List.rev _7
    })
# 511 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'formals_opt) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 58 "parser.mly"
    ({ 
       rtype = Note;
       fname = _1;
       formals = _4;
       body = List.rev _7
    })
# 525 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'formals_opt) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 65 "parser.mly"
    ({ 
       rtype = Chord;
       fname = _1;
       formals = _4;
       body = List.rev _7
    })
# 539 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'formals_opt) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 73 "parser.mly"
    ({ 
       rtype = Rest;
       fname = _1;
       formals = _4;
       body = List.rev _7
    })
# 553 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'formals_opt) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 80 "parser.mly"
    ({ 
       rtype = Track;
       fname = _1;
       formals = _4;
       body = List.rev _7
    })
# 567 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 90 "parser.mly"
        ( _1 )
# 574 "parser.ml"
               : 'formal))
; (fun __caml_parser_env ->
    Obj.repr(
# 95 "parser.mly"
                  ( [] )
# 580 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 96 "parser.mly"
                  ( List.rev _1 )
# 587 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal) in
    Obj.repr(
# 99 "parser.mly"
                             ( [_1] )
# 594 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'formal) in
    Obj.repr(
# 100 "parser.mly"
                             ( _3 :: _1 )
# 602 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'dType) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 105 "parser.mly"
                ( { vType = _1;  vName = _2; } )
# 610 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 114 "parser.mly"
                      ( Vinit(_1, _3) )
# 618 "parser.ml"
               : 'vinit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 117 "parser.mly"
                   ( Assign(Id(_1), _3) )
# 626 "parser.ml"
               : 'assign))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'accessor) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 118 "parser.mly"
                         ( Assign(_1, _3) )
# 634 "parser.ml"
               : 'assign))
; (fun __caml_parser_env ->
    Obj.repr(
# 123 "parser.mly"
                        ( TRACK_CR ([]) )
# 640 "parser.ml"
               : 'track_cr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'track_list) in
    Obj.repr(
# 124 "parser.mly"
                                     ( TRACK_CR ( List.rev _3 ) )
# 647 "parser.ml"
               : 'track_cr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 127 "parser.mly"
         ( [_1] )
# 654 "parser.ml"
               : 'track_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'track_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 128 "parser.mly"
                            ( _3 :: _1 )
# 662 "parser.ml"
               : 'track_list))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 132 "parser.mly"
                          ( REST_CR( _3 ) )
# 669 "parser.ml"
               : 'rest_cr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 138 "parser.mly"
    ( NOTE_CR(_3, _5, _7) )
# 678 "parser.ml"
               : 'note_cr))
; (fun __caml_parser_env ->
    Obj.repr(
# 142 "parser.mly"
                        ( CHORD_CR ([]) )
# 684 "parser.ml"
               : 'chord_cr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'chord_list) in
    Obj.repr(
# 143 "parser.mly"
                                     ( CHORD_CR ( List.rev _3 ) )
# 691 "parser.ml"
               : 'chord_cr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 146 "parser.mly"
         ( [_1] )
# 698 "parser.ml"
               : 'chord_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'chord_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 147 "parser.mly"
                            ( _3 :: _1 )
# 706 "parser.ml"
               : 'chord_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'note_attribute) in
    Obj.repr(
# 151 "parser.mly"
                            ( ACCESSOR(_1, _3) )
# 714 "parser.ml"
               : 'accessor))
; (fun __caml_parser_env ->
    Obj.repr(
# 155 "parser.mly"
        (Pitch)
# 720 "parser.ml"
               : 'note_attribute))
; (fun __caml_parser_env ->
    Obj.repr(
# 156 "parser.mly"
        (Vol)
# 726 "parser.ml"
               : 'note_attribute))
; (fun __caml_parser_env ->
    Obj.repr(
# 157 "parser.mly"
        (Dur)
# 732 "parser.ml"
               : 'note_attribute))
; (fun __caml_parser_env ->
    Obj.repr(
# 160 "parser.mly"
       (Int)
# 738 "parser.ml"
               : 'dType))
; (fun __caml_parser_env ->
    Obj.repr(
# 161 "parser.mly"
        (Note)
# 744 "parser.ml"
               : 'dType))
; (fun __caml_parser_env ->
    Obj.repr(
# 162 "parser.mly"
         (Chord)
# 750 "parser.ml"
               : 'dType))
; (fun __caml_parser_env ->
    Obj.repr(
# 163 "parser.mly"
         (Track)
# 756 "parser.ml"
               : 'dType))
; (fun __caml_parser_env ->
    Obj.repr(
# 164 "parser.mly"
        (Rest)
# 762 "parser.ml"
               : 'dType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 180 "parser.mly"
              ( Expr(_1) )
# 769 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'vinit) in
    Obj.repr(
# 181 "parser.mly"
               ( _1 )
# 776 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl) in
    Obj.repr(
# 182 "parser.mly"
               ( Vdecl(_1) )
# 783 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 183 "parser.mly"
                     ( Return(_2) )
# 790 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 184 "parser.mly"
                            ( Block(List.rev _2) )
# 797 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 185 "parser.mly"
                                            ( If(_3, _5, Block([])) )
# 805 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 186 "parser.mly"
                                            ( If(_3, _5, _7) )
# 814 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expr_opt) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expr_opt) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 188 "parser.mly"
     ( For(_3, _5, _7, _9) )
# 824 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 189 "parser.mly"
                                  ( While(_3, _5) )
# 832 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 195 "parser.mly"
                   ( [] )
# 838 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 196 "parser.mly"
                   ( _2 :: _1 )
# 846 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 201 "parser.mly"
                  ( Noexpr )
# 852 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 202 "parser.mly"
                  ( _1 )
# 859 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 205 "parser.mly"
                     ( Literal(_1) )
# 866 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 206 "parser.mly"
                     ( Id(_1) )
# 873 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'assign) in
    Obj.repr(
# 207 "parser.mly"
                     ( _1 )
# 880 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'accessor) in
    Obj.repr(
# 208 "parser.mly"
                     ( _1 )
# 887 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'chord_cr) in
    Obj.repr(
# 209 "parser.mly"
                     ( _1 )
# 894 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'note_cr) in
    Obj.repr(
# 210 "parser.mly"
                     ( _1 )
# 901 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'rest_cr) in
    Obj.repr(
# 211 "parser.mly"
                     ( _1 )
# 908 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'track_cr) in
    Obj.repr(
# 212 "parser.mly"
                     ( _1 )
# 915 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 213 "parser.mly"
                     ( Binop(_1, Add,   _3) )
# 923 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 214 "parser.mly"
                     ( Binop(_1, Sub,   _3) )
# 931 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 215 "parser.mly"
                     ( Binop(_1, Mult,  _3) )
# 939 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 216 "parser.mly"
                     ( Binop(_1, Div,   _3) )
# 947 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 217 "parser.mly"
                     ( Binop(_1, Equal, _3) )
# 955 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 218 "parser.mly"
                     ( Binop(_1, Neq,   _3) )
# 963 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 219 "parser.mly"
                     ( Binop(_1, Less,  _3) )
# 971 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 220 "parser.mly"
                     ( Binop(_1, Leq,   _3) )
# 979 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 221 "parser.mly"
                     ( Binop(_1, Greater,  _3) )
# 987 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 222 "parser.mly"
                     ( Binop(_1, Geq,   _3) )
# 995 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 223 "parser.mly"
                     ( Binop(_1, Ser, _3) )
# 1003 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 224 "parser.mly"
                       ( Binop (_1, Par, _3) )
# 1011 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 225 "parser.mly"
                     ( Modifier(_1, Incr) )
# 1018 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 226 "parser.mly"
                     ( Modifier(_1, Decr) )
# 1025 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 227 "parser.mly"
                     ( Modifier(_1, Vib) )
# 1032 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 228 "parser.mly"
                     ( Modifier(_1, Trem) )
# 1039 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 229 "parser.mly"
                     ( Modifier(_1, Bend) )
# 1046 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_opt) in
    Obj.repr(
# 230 "parser.mly"
                                 ( Call(_1, _3) )
# 1054 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 231 "parser.mly"
                       ( _2 )
# 1061 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 236 "parser.mly"
                  ( [] )
# 1067 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'actuals_list) in
    Obj.repr(
# 237 "parser.mly"
                  ( List.rev _1 )
# 1074 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 240 "parser.mly"
                            ( [_1] )
# 1081 "parser.ml"
               : 'actuals_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'actuals_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 241 "parser.mly"
                            ( _3 :: _1 )
# 1089 "parser.ml"
               : 'actuals_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
