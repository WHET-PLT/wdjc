#MAKEFILE
# name of compiler: wdjc
# name of file extension: .dj

# FILES NEEDED

# TESTS = \
# ....

#OBJS = ast.cmo parser.cmo scanner.cmo interpret.cmo \
#	bytecode.cmo compile.cmo execute.cmo wdjc.cmo

OBJS = ast.cmo parser.cmo scanner.cmo \
		compile.cmo wdjc.cmo bytecode.cmo

#TARFILES = Makefile testall.sh scanner.mll parser.mly
#	ast.ml interpret.ml compile.ml execute.ml wdjc.ml \
#	$(TESTS:%=tests/test-%.dj) \
#	$(TESTS:%=tests/test-%.out)
	

wdjc : $(OBJS)
	ocamlc -o wdjc $(OBJS)


.PHONY : test
test : wdjc testall.sh
	./testall.sh


scanner.ml : scanner.mll
	ocamllex scanner.mll

parser.ml parser.mli : parser.mly
	ocamlyacc parser.mly

%.cmo : %.ml
	ocamlc -c $<

%.cmi : %.mli
	ocamlc -c $<

#	wdjc.tar.gz : $(TARFILES)
#	cd .. && tar czf wdjc/wdjc.tar.gz $(TARFILES:%=wdjc/%)

.PHONY :	 clean
clean :
	rm -f wdjc parser.ml parser.mli scanner.ml testall.log \
	*.cmo *.cmi *.out *.diff

# Generated by ocamldep *.ml *.mli
ast.cmo: 
ast.cmx: 
bytecode.cmo: ast.cmo 
bytecode.cmx: ast.cmx 
compile.cmo: bytecode.cmo ast.cmo 
compile.cmx: bytecode.cmx ast.cmx 
execute.cmo: bytecode.cmo ast.cmo 
execute.cmx: bytecode.cmx ast.cmx 
wdjc.cmo: scanner.cmo parser.cmi execute.cmo compile.cmo \
    bytecode.cmo ast.cmo 
wdjc.cmx: scanner.cmx parser.cmx execute.cmx compile.cmx \
    bytecode.cmx ast.cmx 
parser.cmo: ast.cmo parser.cmi 
parser.cmx: ast.cmx parser.cmi 
scanner.cmo: parser.cmi 
scanner.cmx: parser.cmx 
parser.cmi: ast.cmo 




